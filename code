//to develop a simulated memory management system 
//supports: paging, memory allocation/deallocation,
//page replacement algorithms (FIFO/LRU,
//virtual-to-physical address translation 

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h> 

//    COMPONENTS    //

//physical memory simulation 
  //should simulate a fixed-size physical memory 
  //each frame should be capable of storing one page
  //maintain a frame table to track free and occupied frames

//************* create physical memory ***********************

/*representing memory as arrays and constants since we're simulating memory and
not using OS memory. using the given values in the instructions as a base for 
our memory. */      

#define memory_size (1 * 1024 * 1024)              // 1 MB in bytes
#define frame_size (4* 1024)                      // 4 KB per frame
#define num_of_frames (memory_size / frame_size) //256 frames

//create a frame table to track all free frames and occupied frames





//virtual address space
  //should simulate multiple processes, each w/its own table
  //processes can request memory allocation in units of pages


//page table
  //each process maintains its own page table
  //each page table entry (PTE) should include   
        //valid bit, frame #, reference bit (used for LRU), modified bit


//memory allocation 
  //support following command: alloc<process_id><num_pages>

//memory access 
  //support following command: access<process_id><virtual_address><read/write>

//page replacement algorithm 
  //implement FIFO and LRU to handle page faults

//memory deallocation
  //support following command: free<process_id>

//main 
//allow user to use the commands^ and output data
//end




